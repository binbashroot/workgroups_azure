---
# tasks file for deploy_rhcsa_client
- name: 'Create nfs users for {{ item }}'
  ansible.builtin.user:
    name: "{{ item['name'] }}"
    home: "/export/home/{{ item['name'] }}"
  loop: "{{ nfs_users }}"

- name: Create /etc/httpd/conf.d directory
  ansible.builtin.file:
    path: /etc/httpd/conf.d
    state: directory
    owner: root
    group: root
    mode: 0755
    seuser: system_u
    serole: object_r
    setype: httpd_config_t

- name: Create custom userdir.conf for use with httpd
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/httpd/conf.d/{{ item }}"
    mode: 0644
    owner: root
    group: root
    seuser: system_u
    serole: object_r
    setype: httpd_config_t
  loop:
    - userdir.conf
    - autoindex.conf

- name: Remove all files for larry moe and curly users
  ansible.builtin.file:
    path: "/export/home/{{ (item[0])['name'] }}/{{ item[1] }}"
    state: absent
  loop: "{{ nfs_users | product(filelist) | list  }}"

- name: Write a password to file
  ansible.builtin.copy:
    content: |
      {{ item['pass'] }}
    dest: "/root/{{ item['name'] }}_password"
    mode: 0644
  changed_when: false
  loop:
    - name: root
      pass: "{{ workgroup + random_string[0:3] }}"

# We have to use the shell module instead of the find module
- name: See if 3 random files owned by larry exist
  ansible.builtin.shell: |
    find {{ larry_dirs | selectattr('path', 'defined') | map(attribute='path') | join(' ') | trim }} -type f -user larry
  register: find_larry_results
  changed_when: false

- name: Create 3 random named files that are owned by larry
  ansible.builtin.shell: |
    fallocate -l {{ item['size'] }} {{ item['path'] }}/{{ random_string }}.{{ item['suffix'] }}
    chown larry:larry {{ item['path'] }}/{{ random_string }}.{{ item['suffix'] }}
    chmod 0644 {{ item['path'] }}/{{ random_string }}.{{ item['suffix'] }}
  loop: "{{ larry_dirs }}"
  when:
    - find_larry_results['stdout_lines']|length < 4

- name: Create /opt/test1, /opt/test2, and /opt/test3 directories
  ansible.builtin.file:
    path: "/opt/{{ item['name'] }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop: "{{ opt_test_dirs }}"

- name: Check for existing files exist in the test directories
  ansible.builtin.find:
    paths: "/opt/{{ item['name'] }}"
  loop: "{{ opt_test_dirs }}"
  register: find_output

- name: Create 5 random files in each of the opt test directories
  ansible.builtin.copy:
    content: |
      {{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=28') }}
    dest: >-
      /opt/{{ item[0]['item']['name'] }}/{{ random_string + '_' + workgroup + index_number|string + '.' + item[0]['item']['suffix'] }}
    mode: 0644
    owner: nobody
    group: nobody
  loop: "{{ find_output['results'] | product(range(1,6)) | list }}"
  loop_control:
    index_var: index_number
  when:
    - item[0]['matched'] | int == 0

- name: Install a basic index.html file
  ansible.builtin.file:
    path: "{{ item['path'] }}"
    state: "{{ item['state'] }}"
    owner: root
    group: root
    mode: "{{ item['mode'] }}"
  loop:
    - { path: /var/www/html/exercise, state: directory, mode: '0755' }
    - { path: /var/www/html/webfiles, state: directory, mode: '0755' }
    - { path: /var/www/html/exercise/index.html, state: touch, mode: '0644' }

- name: Create a validation index.html file
  ansible.builtin.copy:
    content: |
      Congratulations, you have a working web page
    dest: /var/www/html/exercise/index.html
    mode: 0644
    owner: root
    group: root
    setype: ssh_home_t

- name: Get the tasks
  ansible.builtin.uri:
    url: https://raw.githubusercontent.com/binbashroot/rhcsa_practice/main/README.md
    method: GET
    return_content: true
    user: binbashroot
    force_basic_auth: true
    headers:
      Authorization: "Bearer {{ lookup('env', 'GITHUB_TOKEN') }}"
  register: __tasks_download

- name: Copy the tasks
  ansible.builtin.copy:
    content: |
      {{ __tasks_download['content'] }}
    dest: /home/student/tasks
    owner: student
    group: student
    mode: 0644

- name: Remove repo file
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/yum.repos.d/redhat.repo
    - /etc/yum.repos.d/rh-cloud-base.repo

- name: Set SELinux to permissiive
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/selinux
    regexp: '^SELINUX=(.*)'
    line: 'SELINUX=permissive'
  when: keep_orig is undefined

- name: Remove Chrony
  ansible.builtin.dnf:
    name: chrony
    state: absent

- name: Create an empty chrony file
  ansible.builtin.copy:
    content: |
        # Add pool
        # Defaults
        sourcedir /run/chrony-dhcp
        driftfile /var/lib/chrony/drift
        makestep 1.0 3
        rtcsync
        keyfile /etc/chrony.keys
        ntsdumpdir /var/lib/chrony
        leapsectz right/UTC
        logdir /var/log/chrony
    dest: /etc/chrony.conf
    setype: etc_t
    owner: root
    group: root
    mode: 0644

- name: Set the hostname for the reposerver to a bad hostname
  ansible.builtin.hostname:
    name: serverb.example.com
    use: systemd

- name: Create ssh keys for student user
  ansible.builtin.user:
    user: student
    generate_ssh_key: true
    ssh_key_bits: 4096
    ssh_key_file: /home/student/.ssh/id_rsa
...
