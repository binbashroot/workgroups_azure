---
- name: Deploy an Azure Workgroup Environment
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    # AZURE_TENANT: "{{ lookup('env','AZURE_TENANT') }}"
    # AZURE_CLIENT_ID: "{{ lookup('env','AZURE_CLIENT_ID') }}"
    # AZURE_SECRET: "{{ lookup('env','AZURE_SECRET') }}"
    # AZURE_SUBSCRIPTION_ID: "{{ lookup('env','AZURE_SUBSCRIPTION_ID') }}"
    ANSIBLE_AZURE_AUTH_SOURCE: env
  tasks:
    - name: Get the public IP of the host that will connect to Azure
      ansible.builtin.uri:
        url: https://ifconfig.io/ip
        return_content: true
      register: localhost_public_ip

    - name: Assert that a workgroup has been defined
      ansible.builtin.assert:
        that:
          - workgroup is defined
          - workgroup == 'rhcsa' or workgroup == 'rhce'

    - name: Load variable files
      ansible.builtin.include_vars:
        file: terraform_vars.yml

    - name: Create tfstate block
      block:
        - name: "[ BLOCK TASK ] - Set the storage_account_name variable"
          ansible.builtin.set_fact:
            storage_account_name: "{{ workgroup + (azure_resource_group).split('-')[1] + 'tfstate' }}"

        - name: "[ BLOCK TASK ] - Create storage account for terraform state file"
          azure.azcollection.azure_rm_storageaccount:
            resource_group: "{{ azure_resource_group }}"
            type: "{{ azure_storage_account_type | default('Standard_LRS') }}"
            name: "{{ storage_account_name }}"

        - name: '[ BLOCK TASK ] - Create  storage container for terraform state file'
          azure.azcollection.azure_rm_storageblob:
            resource_group: "{{ azure_resource_group }}"
            storage_account_name: "{{ storage_account_name }}"
            container: tfstate

        - name: '[ BLOCK TASK ] - Get the storage facts for our storage account'
          azure.azcollection.azure_rm_storageaccount_info:
            resource_group: "{{ azure_resource_group }}"
            name: "{{ storage_account_name }}"
            show_connection_string: true
          register: __storage_facts

        - name: "[ BLOCK TASK ] - Set the access_key variable for terraform"
          ansible.builtin.set_fact:
            backend_access_key: >-
              {{ __storage_facts['storageaccounts']|
                 selectattr('primary_endpoints','defined')|
                 map(attribute='primary_endpoints')|
                 selectattr('key','defined')|
                 map(attribute='key')|
                 first }}
            boot_diagnostics_endpoint: >-
              {{ __storage_facts['storageaccounts']|
                 selectattr('primary_endpoints','defined')|
                 map(attribute='primary_endpoints')|
                 selectattr('blob','defined')|
                 map(attribute='blob')|
                 selectattr('endpoint','defined')|
                 map(attribute='endpoint')|
                 first }}

    - name: Create terraform files from templates
      ansible.builtin.template:
        src: "{{ template_name }}.j2"
        dest: "{{ playbook_dir }}/{{ tf_project_dir }}/{{ template_name }}"
        mode: 0644
      loop_control:
        loop_var: template_name
      loop: 
        - providers.tf
        - variables.tf
        - main.tf
        - outputs.tf

    - name: Create inventory.azure_rm.yml from a template
      ansible.builtin.template:
        src: inventory.j2
        dest: "{{ playbook_dir }}/inventory/inventory.azure_rm.yml"
        mode: 0644

    - name: Deploy terraform plan
      cloud.terraform.terraform:
        project_path: "{{ playbook_dir }}/{{ tf_project_dir }}"
        state: present
        force_init: true

    - name: Get output information
      cloud.terraform.terraform_output:
        project_path: "{{ tf_project_dir }}"
      register: states

    - name: 
      ansible.builtin.debug:
        msg: "{{ states['outputs']['server_ips']['value'] }}"
      when:
        - (only_tf is defined and only_tf|bool)

    - name: Wait 300 seconds for port 22 to become open
      ansible.builtin.wait_for:
        port: 22
        host: "{{ item }}"
      loop: "{{ states['outputs']['server_ips']['value'] }}"

    - name: Refresh the dynamic inventory
      ansible.builtin.meta: refresh_inventory

- name: Run Post Provision Tasks and Roles
  hosts: all
  gather_facts: true
  become: true
  tasks:

    - name: Add all hosts to /etc/hosts file of each server
      ansible.builtin.blockinfile:
        block: "{{ lookup('template', 'etc_hosts_entries.j2') }}"
        path: /etc/hosts
        backup: true

    - name: Run RHCSA block tasks
      when:
        - (only_tf is undefined or not only_tf|bool)
        - workgroup == 'rhcsa'
      block:

        - name: "[ BLOCK TASK ] ** Include the deploy_rhcsa_server role **"
          ansible.builtin.include_role:
            name: deploy_rhcsa_server
          when: inventory_hostname in groups['rhcsa_server']

        - name: "[ BLOCK TASK ] ** Include the deploy_rhcsa_client role **"
          ansible.builtin.include_role:
            name: deploy_rhcsa_client
          when: inventory_hostname in groups['rhcsa_client']

        - name: "[ BLOCK TASK ] ** Include the deploy_rhcsa_reposerver role **"
          ansible.builtin.include_role:
            name: deploy_rhcsa_reposerver
          when: inventory_hostname in groups['rhcsa_reposerver']

        - name: "[ BLOCK TASK ] Copy README to the reposerver"
          ansible.builtin.template:
            src: rhcsa_exercises.md.j2
            dest: /docs/exercise/docs/rhcsa_exercises.md
            owner: student
            group: student
          when: inventory_hostname in groups['rhcsa_reposerver']

        - name: "[ BLOCK TASK ] Print the lab exercise url"
          ansible.builtin.debug:
            msg:
              - "#################################################"
              - "#   Practice Exercises:"
              - "#   http://{{ groups[workgroup + '_reposerver'] | map('extract',hostvars,'ansible_host')|first }}:3000"
              - "#################################################"
              - "#################################################"
              - "#################################################"
              - "#   SSH Access to Reposerver:"
              - "#   ssh -i ~/.ssh/id_rsa_rhpds \"
              - "#   student@{{ groups[workgroup + '_reposerver'] | map('extract',hostvars,'ansible_host')|first }}"
              - "#################################################"
          when: inventory_hostname in groups['rhcsa_reposerver']
          run_once: true

    - name: Slurp the student user public key
      ansible.builtin.slurp:
        src: /home/student/.ssh/id_rsa.pub
      register: student_public_key
      when: inventory_hostname in groups['rhcsa_client']

    - name: Set public key fact
      set_fact:
        rhcsa_vm1_public_key: "{{ hostvars['rhcsa-vm-1']['student_public_key']['content']|b64decode }}"

    - name: Copy student key over to other hosts 
      ansible.builtin.authorized_key:
        user: student
        state: present
        key: "{{ lookup('vars', 'rhcsa_vm1_public_key') }}"

    - name: Print Public IPs of Provisioned Hosts
      ansible.builtin.debug:
        msg:
          - "Public Ips to your Azure Servers"
          - "{{ groups['all'] | map('extract',hostvars,'ansible_host') }}"
      run_once: true
...
